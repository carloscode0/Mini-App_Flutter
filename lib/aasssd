import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase Auth Demo',
      home: const AuthExample(),
    );
  }
}

class AuthExample extends StatefulWidget {
  const AuthExample({super.key});
  @override
  AuthExampleState createState() => AuthExampleState();
}

class AuthExampleState extends State<AuthExample> {
  String saludoMensaje = "";
  bool logueadoEnEstaSesion = false;

  void signInAnonymously() async {
    try {
      await FirebaseAuth.instance.signInAnonymously();
      setState(() {
        logueadoEnEstaSesion = true;
        // No actualizar saludoMensaje aquí
      });
    } catch (e) {
      setState(() {
        saludoMensaje = "Error al iniciar sesión: $e";
      });
    }
  }

  Future<void> obtenerSaludo() async {
    if (!logueadoEnEstaSesion) {
      setState(() {
        saludoMensaje = "No autenticado";
      });
      return;
    }

    try {
      final response =
          await http.get(Uri.parse('http://192.168.43.79:3000/saludo'));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          saludoMensaje = data['mensaje'] ?? 'Respuesta sin mensaje';
        });
      } else {
        setState(() {
          saludoMensaje = 'Error: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        saludoMensaje = 'Error al conectar: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Firebase Auth")),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              logueadoEnEstaSesion ? "Usuario autenticado" : "No autenticado",
              style: const TextStyle(fontSize: 18),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: signInAnonymously,
              child: const Text("Login anónimo"),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: logueadoEnEstaSesion ? obtenerSaludo : null,
              child: const Text("Obtener saludo del backend"),
            ),
            if (saludoMensaje.isNotEmpty) ...[
              const SizedBox(height: 20),
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Text(
                  saludoMensaje,
                  style: const TextStyle(fontSize: 18),
                  textAlign: TextAlign.center,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}
